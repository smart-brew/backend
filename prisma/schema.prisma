generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brewings {
  id               Int                @id @default(autoincrement())
  recipe_id        Int?
  notes            String?            @db.VarChar
  evaluation       Int?
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  Recipes          Recipes?           @relation(fields: [recipe_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Instruction_logs Instruction_logs[]
  Status_logs      Status_logs[]
}

model Function_templates {
  id               Int                @id @default(autoincrement())
  code_name        String             @unique @db.VarChar
  name             String             @db.VarChar
  category         String             @db.VarChar
  units            String?            @db.VarChar
  input_type       String?            @db.VarChar
  description      String?            @db.VarChar
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  Function_options Function_options[]
  Instructions     Instructions[]
}

model Instruction_logs {
  id             Int           @id @default(autoincrement())
  brewing_id     Int
  instruction_id Int?
  finished       Boolean       @default(false) @db.Boolean
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  Brewings       Brewings      @relation(fields: [brewing_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Instructions   Instructions? @relation(fields: [instruction_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Instructions {
  id                   Int                @id @default(autoincrement())
  recipe_id            Int
  block_id             Int
  function_template_id Int
  function_option_id   Int?
  ordering             Int
  param                Json?              @db.Json
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt
  Recipes              Recipes            @relation(fields: [recipe_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Function_options     Function_options?  @relation(fields: [function_option_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Function_templates   Function_templates @relation(fields: [function_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Blocks               Blocks             @relation(fields: [block_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Instruction_logs     Instruction_logs[]
}

model Function_options {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar
  code_name          String               @unique @db.VarChar
  module             Int
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  Function_templates Function_templates[]
  Instructions       Instructions[]
}

model Ingredients {
  id         Int      @id @default(autoincrement())
  recipe_id  Int
  name       String?  @db.VarChar
  amount     Float?
  type       String?  @db.VarChar
  units      String?  @db.VarChar
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Recipes    Recipes  @relation(fields: [recipe_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Recipes {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar
  description  String?        @db.VarChar
  locked       Boolean        @default(false) @db.Boolean
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  Brewings     Brewings[]
  Instructions Instructions[]
  Ingredients  Ingredients[]
}

model Status_logs {
  id         Int      @id @default(autoincrement())
  brewing_id Int
  status     String?  @db.VarChar
  params     Json     @db.Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Brewings   Brewings @relation(fields: [brewing_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Blocks {
  id           Int            @id @default(autoincrement())
  name         String?        @unique @db.VarChar
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  Instructions Instructions[]
}
