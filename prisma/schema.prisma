generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brewings {
  id               Int                @id @default(autoincrement())
  reciepe_id       Int?
  notes            String?            @db.VarChar
  evaluation       Int?
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  Recepies         Recepies?          @relation(fields: [reciepe_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Instruction_logs Instruction_logs[]
  Status_logs      Status_logs[]
}

model Function_templates {
  id           Int            @id @default(autoincrement())
  module_id    Int?
  name         String         @db.VarChar @unique
  description  String?        @db.VarChar
  params       Json?          @db.Json
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  Modules      Modules?       @relation(fields: [module_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Instructions Instructions[]
}

model Instruction_logs {
  id             Int           @id @default(autoincrement())
  brewing_id     Int?
  instruction_id Int?
  started_at     DateTime?     @db.Timestamp(6)
  finished_at    DateTime?     @db.Timestamp(6)
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  Brewings       Brewings?     @relation(fields: [brewing_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Instructions   Instructions? @relation(fields: [instruction_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Instructions {
  id                   Int                 @id @default(autoincrement())
  reciepe_id           Int?
  step_id              Int?
  function_template_id Int?
  ordering             Int?
  params               Json?               @db.Json
  created_at           DateTime            @default(now())
  updated_at           DateTime            @updatedAt
  Recepies             Recepies?           @relation(fields: [reciepe_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Function_templates   Function_templates? @relation(fields: [function_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Steps                Steps?              @relation(fields: [step_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Instruction_logs     Instruction_logs[]
}

model Modules {
  id                 Int                  @id @default(autoincrement())
  name               String?              @db.VarChar
  description        String?              @db.VarChar
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  Function_templates Function_templates[]
}

model Ingredients {
  id         Int       @id @default(autoincrement())
  reciepe_id Int?
  name       String?   @db.VarChar
  amount     Float?
  type       String?   @db.VarChar
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Recepies   Recepies? @relation(fields: [reciepe_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Recepies {
  id           Int            @id @default(autoincrement())
  name         String?        @db.VarChar
  description  String?        @db.VarChar
  locked       Boolean?       @db.Boolean
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  Brewings     Brewings[]
  Instructions Instructions[]
  Ingredients  Ingredients[]
}

model Status_logs {
  id         Int       @id @default(autoincrement())
  brewing_id Int?
  status     String?   @db.VarChar
  params     Json?     @db.Json
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Brewings   Brewings? @relation(fields: [brewing_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Steps {
  id           Int            @id @default(autoincrement())
  name         String?        @db.VarChar  @unique
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  Instructions Instructions[]
}
